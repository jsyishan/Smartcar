<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\list\SmartCar9th_ARM_Encoder.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\list\SmartCar9th_ARM_Encoder.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Thu Dec 01 16:42:18 2016
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TestCircuitBoard &rArr; TestMotor &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">WAKEUP_IRQHandler</a> from startup_lpc11xx.o(.text) referenced 13 times from startup_lpc11xx.o(RESET)
 <LI><a href="#[c]">CAN_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">SSP1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">I2C_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[f]">TIMER16_0_IRQHandler</a> from irqhandler.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">TIMER16_1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">TIMER32_0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">TIMER32_1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[13]">SSP0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">UART_IRQHandler</a> from uart.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">USB_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[16]">USB_FIQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">BOD_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1a]">FMC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">PIOINT3_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">PIOINT2_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1e]">PIOINT0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from systeminit.o(.text) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[21]">__main</a> from __main.o(!!!main) referenced from startup_lpc11xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[29]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[72]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[73]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[74]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[75]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[76]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[77]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[79]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[80]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[81]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[82]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[83]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[84]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[8a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[23]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[8b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[26]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[8c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TestCircuitBoard &rArr; TestMotor &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USB_FIQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER16_0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_PWMOut
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_motor_PWMOut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TeleControl</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, protect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TeleControl
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>SetServoAngle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, servo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTrace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTrace
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[32]"></a>servo_PWMOut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, servo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>Control</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Control &rArr; SpeedOut &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedOut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>RightTrace</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RightTrace &rArr; SpeedOut &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedOut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>LeftTrace</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, arithmetic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LeftTrace &rArr; SpeedOut &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedOut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>PWMOut</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, motor_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedOut
</UL>

<P><STRONG><a name="[38]"></a>SpeedOut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, motor_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpeedOut &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTrace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTrace
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[36]"></a>GetErr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, servo_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetErr &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTrace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTrace
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>

<P><STRONG><a name="[5e]"></a>ReadSwitch</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
</UL>

<P><STRONG><a name="[58]"></a>WriteLEDOnDrive</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLEDOnDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
</UL>

<P><STRONG><a name="[5f]"></a>BUZZER_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
</UL>

<P><STRONG><a name="[57]"></a>BUZZER_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
</UL>

<P><STRONG><a name="[34]"></a>Remote</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeleControl
</UL>

<P><STRONG><a name="[5b]"></a>GetDigitalSensorValue</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, digital_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDigitalSensorValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
</UL>

<P><STRONG><a name="[5c]"></a>GET_START_BAR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, digital_sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
</UL>

<P><STRONG><a name="[65]"></a>GetDigitalSensorNum</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, digital_sensor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Init_Encoder</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, init_encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>

<P><STRONG><a name="[3f]"></a>set_GPIO_Dir</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, init_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[40]"></a>reset_GPIO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
</UL>

<P><STRONG><a name="[3e]"></a>Init_GPIO</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, init_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_GPIO
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_GPIO
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_GPIO_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>

<P><STRONG><a name="[95]"></a>delayMs</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, init_motor.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>enable_timer16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init_motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
</UL>

<P><STRONG><a name="[44]"></a>disable_timer16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, init_motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
</UL>

<P><STRONG><a name="[96]"></a>reset_timer16</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, init_motor.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>init_timer16</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, init_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_timer16
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
</UL>

<P><STRONG><a name="[43]"></a>Init_motor</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, init_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_motor &rArr; init_timer16
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer16
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer16
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer16
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>

<P><STRONG><a name="[47]"></a>enable_timer32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_servo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_servo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
</UL>

<P><STRONG><a name="[49]"></a>disable_timer32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init_servo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_servo
</UL>

<P><STRONG><a name="[46]"></a>init_timer32</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, init_servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_servo
</UL>

<P><STRONG><a name="[48]"></a>Init_servo</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, init_servo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_servo &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>

<P><STRONG><a name="[4b]"></a>check_pwm_limit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_RR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_LR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_RF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_LF
</UL>

<P><STRONG><a name="[4a]"></a>PWMout_LF</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWMout_LF
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwm_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>

<P><STRONG><a name="[4c]"></a>PWMout_RF</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWMout_RF
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwm_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>

<P><STRONG><a name="[4d]"></a>PWMout_LR</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWMout_LR
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwm_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>

<P><STRONG><a name="[4e]"></a>PWMout_RR</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_pwm_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
</UL>

<P><STRONG><a name="[3a]"></a>PWMOut4</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_RR
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_LR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_RF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMout_LF
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedOut
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTrace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTrace
</UL>

<P><STRONG><a name="[31]"></a>IRQ_motor_PWMOut</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER16_0_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>Main_PLL_Setup</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, systeminit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, systeminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_PLL_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>clk_out</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, systeminit.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>Init_ALL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systeminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_ALL &rArr; Init_UART
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_servo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Encoder
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>TestServo</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TestServo &rArr; myitoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_OFF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLEDOnDrive
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
</UL>

<P><STRONG><a name="[59]"></a>TestMotor</STRONG> (Thumb, 330 bytes, Stack size 72 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TestMotor &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_OFF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLEDOnDrive
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
</UL>

<P><STRONG><a name="[5a]"></a>TestSensor</STRONG> (Thumb, 808 bytes, Stack size 56 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TestSensor &rArr; myitoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_START_BAR
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalSensorValue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_OFF
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLEDOnDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
</UL>

<P><STRONG><a name="[5d]"></a>TestPeriphery</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TestPeriphery &rArr; myitoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_OFF
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLEDOnDrive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
</UL>

<P><STRONG><a name="[60]"></a>TestEncoder</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TestEncoder &rArr; myitoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
</UL>

<P><STRONG><a name="[61]"></a>TestCircuitBoard</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TestCircuitBoard &rArr; TestMotor &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_recive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>UART_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Init_UART</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_UART
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
</UL>

<P><STRONG><a name="[54]"></a>UARTSend</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
</UL>

<P><STRONG><a name="[56]"></a>UART_recive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
</UL>

<P><STRONG><a name="[55]"></a>myitoa</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = myitoa &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestEncoder
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPeriphery
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestSensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMotor
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestServo
</UL>

<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 416 bytes, Stack size 64 bytes, smartcar6th.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; TestCircuitBoard &rArr; TestMotor &rArr; PWMOut &rArr; PWMOut4 &rArr; PWMout_RR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestCircuitBoard
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ALL
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalSensorNum
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_START_BAR
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalSensorValue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_OFF
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_ON
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLEDOnDrive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSwitch
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeleControl
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut4
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTrace
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTrace
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[68]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[67]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[98]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myitoa
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErr
</UL>

<P><STRONG><a name="[27]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[30]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[9c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[42]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init_motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_motor
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer16
</UL>

<P><STRONG><a name="[66]"></a>SetSpeed</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, smartcar6th.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
